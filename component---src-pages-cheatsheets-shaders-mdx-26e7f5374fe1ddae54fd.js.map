{"version":3,"file":"component---src-pages-cheatsheets-shaders-mdx-26e7f5374fe1ddae54fd.js","mappings":"iRAQaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,8BACA,mCACA,qIACA,+GAAiG,sBAAYC,WAAW,KAAvB,QAAjG,iJAAkS,sBAAYA,WAAW,KAAvB,cAAlS,4EACA,iCACA,+IACA,wHAA0G,sBAAYA,WAAW,KAAvB,+CAA1G,iOACA,qCACA,0DACA,iCACE,SAAY,OACZ,SAAY,UAFd,gBAIQ,gBAAMA,WAAW,wBACrB,KAAQ,QADJ,kkBAJR,eAiCA,oCACA,iCACE,SAAY,OACZ,SAAY,UAFd,gBAIQ,gBAAMA,WAAW,wBACrB,KAAQ,QADJ,ozBAJR,eA6CJJ,EAAWK,gBAAiB,G,sBC5Gb,SAASC,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,E","sources":["webpack://denntenna.github.io/./src/pages/cheatsheets/shaders.mdx","webpack://denntenna.github.io/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/denntenna.github.io/denntenna.github.io/src/components/default-mdx-layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Shaders`}</h1>\n    <h2>{`Mental Model`}</h2>\n    <p>{`Shader is a function that takes position of a pixel (amongst other inputs) and returns the color of that pixel.`}</p>\n    <p>{`You have mathematical functions to emulate imperative programming. for instance, think of `}<inlineCode parentName=\"p\">{`step`}</inlineCode>{` function as a comparator that compares two inputs. Very much like an if condition. It returns a 0 or 1 (like the if condition). You can use `}<inlineCode parentName=\"p\">{`smoothstep`}</inlineCode>{`, if instead of a boolean you want a smooth transition between 0 and 1.`}</p>\n    <h2>{`glslviewer`}</h2>\n    <p>{`This is the best way to work on shaders because it provides you with almost a live coding environment for making shaders.`}</p>\n    <p>{`Lets say you are working on a fragment shader and need to work with a texture, run glslviewer with `}<inlineCode parentName=\"p\">{`../build/glslViewer shader.frag texture.png`}</inlineCode>{`. This will open up a window where the shader can be previewed. Now, you can also open up shader.frag in a text editor. As you make changes to it, glsviewer live-reloads the new shader and you get instantaneous previews.`}</p>\n    <h2>{`Simple Shaders`}</h2>\n    <h3>{`Slide between two images with mouse`}</h3>\n    <deckgo-highlight-code {...{\n      \"language\": \"glsl\",\n      \"terminal\": \"carbon\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`#version 100\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform sampler2D   u_tex0;\nuniform sampler2D   u_tex1;\n\nuniform vec2        u_mouse;\nuniform vec2        u_resolution;\nuniform float       u_time;\n\nvoid main (void) {\n    vec3 color = vec3(0.0);\n    vec3 color2 = vec3(0.0);\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec2 mn = u_mouse/u_resolution;\n\n    color = texture2D(u_tex1, st).rgb;\n    color2 = texture2D(u_tex0, st).rgb;\n\n    float scale = step(mn.x, st.x);\n\n    gl_FragColor = vec4(color*scale+color2*(1.0-scale), 1.0);\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <h3>{`Circular Mask`}</h3>\n    <deckgo-highlight-code {...{\n      \"language\": \"glsl\",\n      \"terminal\": \"carbon\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`#version 100\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform sampler2D   u_tex0;\nuniform sampler2D   u_tex1;\n\nuniform vec2        u_mouse;\nuniform vec2        u_resolution;\nuniform float       u_time;\n\nfloat circle(in vec2 _st, vec2 _mn, in float _radius){\n    vec2 dist = _st-_mn;\n\treturn 1.-smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(dist,dist)*4.0);\n}\n\nvoid main (void) {\n    vec3 color = vec3(0.0);\n    vec3 color2 = vec3(0.0);\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec2 mn = u_mouse/u_resolution;\n\n    color2 = texture2D(u_tex1, st).rgb;\n    color = texture2D(u_tex0, st).rgb;\n\n    vec3 scale = vec3(circle(st,mn, 0.05));\n\n    gl_FragColor = vec4(color*scale+color2*(1.0-scale), 1.0);\n\n}`}</code>{`\n        `}</deckgo-highlight-code>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"sourceRoot":""}