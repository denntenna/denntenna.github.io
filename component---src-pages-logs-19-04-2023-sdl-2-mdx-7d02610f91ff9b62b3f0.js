"use strict";(self.webpackChunkdenntenna_github_io=self.webpackChunkdenntenna_github_io||[]).push([[9099],{31283:function(n,e,i){i.r(e),i.d(e,{_frontmatter:function(){return r},default:function(){return c}});var t=i(63366),a=(i(67294),i(64983)),o=i(66101),d=["components"],r={},u={_frontmatter:r},l=o.Z;function c(n){var e=n.components,i=(0,t.Z)(n,d);return(0,a.kt)(l,Object.assign({},u,i,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h2",null,"Prerequisites"),(0,a.kt)("p",null,"Install sdl2 on your linux machine. These can work on ubuntu :"),(0,a.kt)("deckgo-highlight-code",{terminal:"carbon"},"\n          ",(0,a.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"sudo apt-get install libsdl2-2.0-0\nsudo apt-get install libsdl2-dev"),"\n        "),(0,a.kt)("h2",null,"Hello Sound"),(0,a.kt)("deckgo-highlight-code",{language:"c",terminal:"carbon"},"\n          ",(0,a.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},'#include <SDL.h>\n#include <stdio.h>\n\n#define FREQ 440 /* the frequency we want */\n\nunsigned int audio_pos; /* which sample we are up to */\nint audio_len;          /* how many samples left to play, stops when <= 0 */\nfloat audio_frequency;  /* audio frequency in cycles per sample */\nfloat audio_volume;     /* audio volume, 0 - ~32000 */\n\n/* dummy callback */\nvoid MyAudioCallback(void *data, Uint8 *stream, int len)\n{\n  len /= 2; /* 16 bit */\n  int i;\n  Sint16 *buf = (Sint16 *)stream;\n  for (i = 0; i < len; i++)\n  {\n    buf[i] = audio_volume * sin(2 * M_PI * audio_pos * audio_frequency);\n    audio_pos++;\n  }\n  audio_len -= len;\n  return;\n}\n\nint main()\n{\n  printf("hi");\n  int i;\n\n  if (SDL_Init(SDL_INIT_AUDIO))\n  {\n    printf("[SDL] Failed to initialize: %s\\n", SDL_GetError());\n    return 1;\n  }\n\n  /* print the audio driver we are using */\n  printf("[SDL] Audio driver: %s\\n", SDL_GetCurrentAudioDriver());\n\n  /* pass it 0 for playback */\n  int numAudioDevices = SDL_GetNumAudioDevices(0);\n\n  /* print the audio devices that we can see */\n  printf("[SDL] %d audio devices:", numAudioDevices);\n  for (i = 0; i < numAudioDevices; i++)\n    printf(" \\\'%s\\\'", SDL_GetAudioDeviceName(i, 0)); /* again, 0 for playback */\n  printf("\\n");\n\n  SDL_AudioSpec want, have;\n  SDL_zero(want);\n\n  /* a general specification */\n  want.freq = 44100;\n  want.format = AUDIO_S16;\n  want.channels = 1;               /* 1, 2, 4, or 6 */\n  want.samples = 4096;             /* power of 2, or 0 and env SDL_AUDIO_SAMPLES is used */\n  want.callback = MyAudioCallback; /* can not be NULL */\n\n  printf("[SDL] Desired - frequency: %d format: f %d s %d be %d sz %d channels: %d samples: %d\\n", want.freq, SDL_AUDIO_ISFLOAT(want.format), SDL_AUDIO_ISSIGNED(want.format), SDL_AUDIO_ISBIGENDIAN(want.format), SDL_AUDIO_BITSIZE(want.format), want.channels, want.samples);\n\n  /* open audio device, allowing any changes to the specification */\n  SDL_AudioDeviceID dev = SDL_OpenAudioDevice(NULL, 0, &want, &have, SDL_AUDIO_ALLOW_ANY_CHANGE);\n\n  if (!dev)\n  {\n    printf("[SDL] Failed to open audio device: %s\\n", SDL_GetError());\n    SDL_Quit();\n    return 1;\n  }\n\n  printf("[SDL] Obtained - frequency: %d format: f %d s %d be %d sz %d channels: %d samples: %d\\n", have.freq, SDL_AUDIO_ISFLOAT(have.format), SDL_AUDIO_ISSIGNED(have.format), SDL_AUDIO_ISBIGENDIAN(have.format), SDL_AUDIO_BITSIZE(have.format), have.channels, have.samples);\n\n  audio_len = have.freq * 5; /* 5 seconds */\n  audio_pos = 0;\n  audio_frequency = 1.0 * FREQ / have.freq; /* 1.0 to make it a float */\n  audio_volume = 6000;                      /* ~1/5 max volume */\n\n  SDL_PauseAudioDevice(dev, 0); /* play! */\n\n  while (audio_len > 0)\n  {\n    SDL_Delay(500);\n  }\n\n  SDL_CloseAudioDevice(dev);\n  SDL_Quit();\n\n  return 0;\n  printf("bye");\n}'),"\n        "),(0,a.kt)("h2",null,"Running the application"),(0,a.kt)("deckgo-highlight-code",{language:"bash",terminal:"carbon"},"\n          ",(0,a.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"gcc -o trtl test.c `sdl2-config --cflags --libs` -lSDL2main -lm"),"\n        "))}c.isMDXComponent=!0},63366:function(n,e,i){function t(n,e){if(null==n)return{};var i,t,a={},o=Object.keys(n);for(t=0;t<o.length;t++)i=o[t],e.indexOf(i)>=0||(a[i]=n[i]);return a}i.d(e,{Z:function(){return t}})}}]);
//# sourceMappingURL=component---src-pages-logs-19-04-2023-sdl-2-mdx-7d02610f91ff9b62b3f0.js.map