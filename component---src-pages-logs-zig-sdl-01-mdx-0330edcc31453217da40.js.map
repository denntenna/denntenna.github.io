{"version":3,"file":"component---src-pages-logs-zig-sdl-01-mdx-0330edcc31453217da40.js","mappings":"iRAQaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,mCACA,yCACA,4QACA,6PACA,yMACA,iCACE,SAAY,MACZ,SAAY,UAFd,gBAIQ,gBAAMC,WAAW,wBACrB,KAAQ,QADJ,uoCAJR,eAwCA,sCACA,mBACE,cAAIA,WAAW,MAAf,cAAkC,sBAAYA,WAAW,MAAvB,0FAClC,cAAIA,WAAW,MAAf,kBACA,cAAIA,WAAW,MAAf,+CACA,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAvB,WAApB,+EAEF,gCACA,kBAAG,aAAGA,WAAW,IACb,KAAQ,oDADT,sDAGH,iCACA,oGAKJJ,EAAWK,gBAAiB,G,sBClFb,SAASC,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,E","sources":["webpack://denntenna.github.io/./src/pages/logs/zig-sdl-01.mdx","webpack://denntenna.github.io/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/denntenna.github.io/denntenna.github.io/src/components/default-mdx-layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Zig and SDL2`}</h1>\n    <h2>{`Bare bones Program`}</h2>\n    <p>{`trtl is my first foray into low level systems programming. While zig seems well suited for this, I wanted to use a library that would abstract away low level graphics, audio and input functionality. After a lot of research, I zeroed down on sdl2.`}</p>\n    <p>{`Given my lack of experience in the c ecosystem, even trivial things like linking libraries took me a while to figure out. Given Zig's C interop, I wanted to avoid using any sdl wrappers for zig and figure out how to do this myself.`}</p>\n    <p>{`I was able to setup a barebones zig program which integrates sdl2. I also deliberately avoided using the zig build file to remove that complexity. Will add one as my needs evolve.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"zig\",\n      \"terminal\": \"carbon\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`const std = @import(\"std\");\nconst sdl = @cImport({\n    @cInclude(\"SDL.h\");\n});\n\npub fn main() void{\n    std.debug.print(\"hi\",.{});\n    _ = sdl.SDL_Init(sdl.SDL_INIT_VIDEO);\n    defer sdl.SDL_Quit();\n    const window = sdl.SDL_CreateWindow(\"trtl\", sdl.SDL_WINDOWPOS_CENTERED, sdl.SDL_WINDOWPOS_CENTERED, 166, 166, 0);\n    defer sdl.SDL_DestroyWindow(window);\n    const surface = sdl.SDL_GetWindowSurface(window);\n\n    var quit = false;\n    while (!quit) {\n        var event: sdl.SDL_Event = undefined;\n        while (sdl.SDL_PollEvent(&event) != 0) {\n            switch (event.@\"type\") {\n                sdl.SDL_QUIT => {\n                    quit = true;\n                },\n                else => {},\n            }\n        }\n\t// Draw a white cross on red background\n        _ = sdl.SDL_FillRect(surface, 0, 0xff0000);\n        const v = sdl.SDL_Rect{ .x = 33, .y = 66, .w = 100, .h = 34 };\n        _ = sdl.SDL_FillRect(surface, &v, 0xffffff);\n        const h = sdl.SDL_Rect{ .x = 66, .y = 33, .w = 34, .h = 100 };\n        _ = sdl.SDL_FillRect(surface, &h, 0xffffff);\n        _ = sdl.SDL_UpdateWindowSurface(window);\n    }\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <h2>{`Compiling Notes`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`command : `}<inlineCode parentName=\"li\">{`zig build-exe main.zig -OReleaseSmall -fstrip $(pkg-config --libs --cflags sdl2) -lc`}</inlineCode></li>\n      <li parentName=\"ul\">{`lc links libc`}</li>\n      <li parentName=\"ul\">{`pkg-config helps get include path for sdl2`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`-fstrip`}</inlineCode>{` parameter of build-exe omits debug symbols from the output of pkg-config`}</li>\n    </ul>\n    <h2>{`Reference`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://zserge.com/posts/zig-the-small-language/\"\n      }}>{`https://zserge.com/posts/zig-the-small-language/`}</a></p>\n    <h2>{`Next Steps`}</h2>\n    <p>{`Setting up boilerplate code for the ui, keyboard, mouse input and audio output`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"sourceRoot":""}