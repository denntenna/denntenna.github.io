{"version":3,"file":"component---src-pages-logs-19-04-2023-sdl-2-mdx-7d02610f91ff9b62b3f0.js","mappings":"iRAQaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,oCACA,oFACA,iCACE,SAAY,UADd,gBAGQ,gBAAMC,WAAW,wBACrB,KAAQ,QADJ,wEAHR,eAQA,kCACA,iCACE,SAAY,IACZ,SAAY,UAFd,gBAIQ,gBAAMA,WAAW,wBACrB,KAAQ,QADJ,u0FAJR,eAiGA,8CACA,iCACE,SAAY,OACZ,SAAY,UAFd,gBAIQ,gBAAMA,WAAW,wBACrB,KAAQ,QADJ,mEAJR,eAYJJ,EAAWK,gBAAiB,G,sBC7Ib,SAASC,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,E","sources":["webpack://denntenna.github.io/./src/pages/logs/19-04-2023-sdl2.mdx","webpack://denntenna.github.io/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/denntenna.github.io/denntenna.github.io/src/components/default-mdx-layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`Prerequisites`}</h2>\n    <p>{`Install sdl2 on your linux machine. These can work on ubuntu :`}</p>\n    <deckgo-highlight-code {...{\n      \"terminal\": \"carbon\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`sudo apt-get install libsdl2-2.0-0\nsudo apt-get install libsdl2-dev`}</code>{`\n        `}</deckgo-highlight-code>\n    <h2>{`Hello Sound`}</h2>\n    <deckgo-highlight-code {...{\n      \"language\": \"c\",\n      \"terminal\": \"carbon\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`#include <SDL.h>\n#include <stdio.h>\n\n#define FREQ 440 /* the frequency we want */\n\nunsigned int audio_pos; /* which sample we are up to */\nint audio_len;          /* how many samples left to play, stops when <= 0 */\nfloat audio_frequency;  /* audio frequency in cycles per sample */\nfloat audio_volume;     /* audio volume, 0 - ~32000 */\n\n/* dummy callback */\nvoid MyAudioCallback(void *data, Uint8 *stream, int len)\n{\n  len /= 2; /* 16 bit */\n  int i;\n  Sint16 *buf = (Sint16 *)stream;\n  for (i = 0; i < len; i++)\n  {\n    buf[i] = audio_volume * sin(2 * M_PI * audio_pos * audio_frequency);\n    audio_pos++;\n  }\n  audio_len -= len;\n  return;\n}\n\nint main()\n{\n  printf(\"hi\");\n  int i;\n\n  if (SDL_Init(SDL_INIT_AUDIO))\n  {\n    printf(\"[SDL] Failed to initialize: %s\\\\n\", SDL_GetError());\n    return 1;\n  }\n\n  /* print the audio driver we are using */\n  printf(\"[SDL] Audio driver: %s\\\\n\", SDL_GetCurrentAudioDriver());\n\n  /* pass it 0 for playback */\n  int numAudioDevices = SDL_GetNumAudioDevices(0);\n\n  /* print the audio devices that we can see */\n  printf(\"[SDL] %d audio devices:\", numAudioDevices);\n  for (i = 0; i < numAudioDevices; i++)\n    printf(\" \\\\'%s\\\\'\", SDL_GetAudioDeviceName(i, 0)); /* again, 0 for playback */\n  printf(\"\\\\n\");\n\n  SDL_AudioSpec want, have;\n  SDL_zero(want);\n\n  /* a general specification */\n  want.freq = 44100;\n  want.format = AUDIO_S16;\n  want.channels = 1;               /* 1, 2, 4, or 6 */\n  want.samples = 4096;             /* power of 2, or 0 and env SDL_AUDIO_SAMPLES is used */\n  want.callback = MyAudioCallback; /* can not be NULL */\n\n  printf(\"[SDL] Desired - frequency: %d format: f %d s %d be %d sz %d channels: %d samples: %d\\\\n\", want.freq, SDL_AUDIO_ISFLOAT(want.format), SDL_AUDIO_ISSIGNED(want.format), SDL_AUDIO_ISBIGENDIAN(want.format), SDL_AUDIO_BITSIZE(want.format), want.channels, want.samples);\n\n  /* open audio device, allowing any changes to the specification */\n  SDL_AudioDeviceID dev = SDL_OpenAudioDevice(NULL, 0, &want, &have, SDL_AUDIO_ALLOW_ANY_CHANGE);\n\n  if (!dev)\n  {\n    printf(\"[SDL] Failed to open audio device: %s\\\\n\", SDL_GetError());\n    SDL_Quit();\n    return 1;\n  }\n\n  printf(\"[SDL] Obtained - frequency: %d format: f %d s %d be %d sz %d channels: %d samples: %d\\\\n\", have.freq, SDL_AUDIO_ISFLOAT(have.format), SDL_AUDIO_ISSIGNED(have.format), SDL_AUDIO_ISBIGENDIAN(have.format), SDL_AUDIO_BITSIZE(have.format), have.channels, have.samples);\n\n  audio_len = have.freq * 5; /* 5 seconds */\n  audio_pos = 0;\n  audio_frequency = 1.0 * FREQ / have.freq; /* 1.0 to make it a float */\n  audio_volume = 6000;                      /* ~1/5 max volume */\n\n  SDL_PauseAudioDevice(dev, 0); /* play! */\n\n  while (audio_len > 0)\n  {\n    SDL_Delay(500);\n  }\n\n  SDL_CloseAudioDevice(dev);\n  SDL_Quit();\n\n  return 0;\n  printf(\"bye\");\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <h2>{`Running the application`}</h2>\n    <deckgo-highlight-code {...{\n      \"language\": \"bash\",\n      \"terminal\": \"carbon\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`gcc -o trtl test.c \\`sdl2-config --cflags --libs\\` -lSDL2main -lm`}</code>{`\n        `}</deckgo-highlight-code>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"sourceRoot":""}