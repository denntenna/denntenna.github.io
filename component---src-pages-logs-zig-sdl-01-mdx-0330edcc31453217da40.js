"use strict";(self.webpackChunkdenntenna_github_io=self.webpackChunkdenntenna_github_io||[]).push([[7326],{12879:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return a},default:function(){return u}});var l=t(63366),i=(t(67294),t(64983)),o=t(66101),s=["components"],a={},r={_frontmatter:a},d=o.Z;function u(e){var n=e.components,t=(0,l.Z)(e,s);return(0,i.kt)(d,Object.assign({},r,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",null,"Zig and SDL2"),(0,i.kt)("h2",null,"Bare bones Program"),(0,i.kt)("p",null,"trtl is my first foray into low level systems programming. While zig seems well suited for this, I wanted to use a library that would abstract away low level graphics, audio and input functionality. After a lot of research, I zeroed down on sdl2."),(0,i.kt)("p",null,"Given my lack of experience in the c ecosystem, even trivial things like linking libraries took me a while to figure out. Given Zig's C interop, I wanted to avoid using any sdl wrappers for zig and figure out how to do this myself."),(0,i.kt)("p",null,"I was able to setup a barebones zig program which integrates sdl2. I also deliberately avoided using the zig build file to remove that complexity. Will add one as my needs evolve."),(0,i.kt)("deckgo-highlight-code",{language:"zig",terminal:"carbon"},"\n          ",(0,i.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},'const std = @import("std");\nconst sdl = @cImport({\n    @cInclude("SDL.h");\n});\n\npub fn main() void{\n    std.debug.print("hi",.{});\n    _ = sdl.SDL_Init(sdl.SDL_INIT_VIDEO);\n    defer sdl.SDL_Quit();\n    const window = sdl.SDL_CreateWindow("trtl", sdl.SDL_WINDOWPOS_CENTERED, sdl.SDL_WINDOWPOS_CENTERED, 166, 166, 0);\n    defer sdl.SDL_DestroyWindow(window);\n    const surface = sdl.SDL_GetWindowSurface(window);\n\n    var quit = false;\n    while (!quit) {\n        var event: sdl.SDL_Event = undefined;\n        while (sdl.SDL_PollEvent(&event) != 0) {\n            switch (event.@"type") {\n                sdl.SDL_QUIT => {\n                    quit = true;\n                },\n                else => {},\n            }\n        }\n\t// Draw a white cross on red background\n        _ = sdl.SDL_FillRect(surface, 0, 0xff0000);\n        const v = sdl.SDL_Rect{ .x = 33, .y = 66, .w = 100, .h = 34 };\n        _ = sdl.SDL_FillRect(surface, &v, 0xffffff);\n        const h = sdl.SDL_Rect{ .x = 66, .y = 33, .w = 34, .h = 100 };\n        _ = sdl.SDL_FillRect(surface, &h, 0xffffff);\n        _ = sdl.SDL_UpdateWindowSurface(window);\n    }\n}'),"\n        "),(0,i.kt)("h2",null,"Compiling Notes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"command : ",(0,i.kt)("inlineCode",{parentName:"li"},"zig build-exe main.zig -OReleaseSmall -fstrip $(pkg-config --libs --cflags sdl2) -lc")),(0,i.kt)("li",{parentName:"ul"},"lc links libc"),(0,i.kt)("li",{parentName:"ul"},"pkg-config helps get include path for sdl2"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-fstrip")," parameter of build-exe omits debug symbols from the output of pkg-config")),(0,i.kt)("h2",null,"Reference"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://zserge.com/posts/zig-the-small-language/"},"https://zserge.com/posts/zig-the-small-language/")),(0,i.kt)("h2",null,"Next Steps"),(0,i.kt)("p",null,"Setting up boilerplate code for the ui, keyboard, mouse input and audio output"))}u.isMDXComponent=!0},63366:function(e,n,t){function l(e,n){if(null==e)return{};var t,l,i={},o=Object.keys(e);for(l=0;l<o.length;l++)t=o[l],n.indexOf(t)>=0||(i[t]=e[t]);return i}t.d(n,{Z:function(){return l}})}}]);
//# sourceMappingURL=component---src-pages-logs-zig-sdl-01-mdx-0330edcc31453217da40.js.map